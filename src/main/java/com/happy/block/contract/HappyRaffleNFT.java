package com.happy.block.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.3.
 */
@SuppressWarnings("rawtypes")
public class HappyRaffleNFT extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b50604051612ff4380380612ff483398181016040528101906100329190610394565b336040518060400160405280600981526020017f526166666c654e465400000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f524146464c45000000000000000000000000000000000000000000000000000081525081600090816100ae91906105fe565b5080600190816100be91906105fe565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101335760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161012a9190610711565b60405180910390fd5b6101428161015960201b60201c565b5080600a908161015291906105fe565b505061072c565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102868261023d565b810181811067ffffffffffffffff821117156102a5576102a461024e565b5b80604052505050565b60006102b861021f565b90506102c4828261027d565b919050565b600067ffffffffffffffff8211156102e4576102e361024e565b5b6102ed8261023d565b9050602081019050919050565b60005b838110156103185780820151818401526020810190506102fd565b60008484015250505050565b6000610337610332846102c9565b6102ae565b90508281526020810184848401111561035357610352610238565b5b61035e8482856102fa565b509392505050565b600082601f83011261037b5761037a610233565b5b815161038b848260208601610324565b91505092915050565b6000602082840312156103aa576103a9610229565b5b600082015167ffffffffffffffff8111156103c8576103c761022e565b5b6103d484828501610366565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061042f57607f821691505b602082108103610442576104416103e8565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026104aa7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261046d565b6104b4868361046d565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006104fb6104f66104f1846104cc565b6104d6565b6104cc565b9050919050565b6000819050919050565b610515836104e0565b61052961052182610502565b84845461047a565b825550505050565b600090565b61053e610531565b61054981848461050c565b505050565b5b8181101561056d57610562600082610536565b60018101905061054f565b5050565b601f8211156105b25761058381610448565b61058c8461045d565b8101602085101561059b578190505b6105af6105a78561045d565b83018261054e565b50505b505050565b600082821c905092915050565b60006105d5600019846008026105b7565b1980831691505092915050565b60006105ee83836105c4565b9150826002028217905092915050565b610607826103dd565b67ffffffffffffffff8111156106205761061f61024e565b5b61062a8254610417565b610635828285610571565b600060209050601f8311600181146106685760008415610656578287015190505b61066085826105e2565b8655506106c8565b601f19841661067686610448565b60005b8281101561069e57848901518255600182019150602085019450602081019050610679565b868310156106bb57848901516106b7601f8916826105c4565b8355505b6001600288020188555050505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106fb826106d0565b9050919050565b61070b816106f0565b82525050565b60006020820190506107266000830184610702565b92915050565b6128b98061073b6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806370a08231116100c3578063a476b73d1161007c578063a476b73d14610368578063ad09340914610384578063b88d4fde146103b4578063c87b56dd146103d0578063e985e9c514610400578063f2fde38b146104305761014d565b806370a08231146102b8578063715018a6146102e85780638da5cb5b146102f25780638e5b1d991461031057806395d89b411461032e578063a22cb4651461034c5761014d565b806323b872dd1161011557806323b872dd146101f657806342842e0e1461021257806357692d0c1461022e5780635aa68ac01461024c5780635d495aea1461026a5780636352211e146102885761014d565b806301ffc9a71461015257806306fdde0314610182578063081812fc146101a0578063095ea7b3146101d0578063144a27d6146101ec575b600080fd5b61016c60048036038101906101679190611e40565b61044c565b6040516101799190611e88565b60405180910390f35b61018a61052e565b6040516101979190611f33565b60405180910390f35b6101ba60048036038101906101b59190611f8b565b6105c0565b6040516101c79190611ff9565b60405180910390f35b6101ea60048036038101906101e59190612040565b6105dc565b005b6101f46105f2565b005b610210600480360381019061020b9190612080565b6106cf565b005b61022c60048036038101906102279190612080565b6107d1565b005b6102366107f1565b6040516102439190611f33565b60405180910390f35b610254610883565b6040516102619190612191565b60405180910390f35b610272610911565b60405161027f9190611ff9565b60405180910390f35b6102a2600480360381019061029d9190611f8b565b6109e1565b6040516102af9190611ff9565b60405180910390f35b6102d260048036038101906102cd91906121b3565b6109f3565b6040516102df91906121ef565b60405180910390f35b6102f0610aad565b005b6102fa610ac1565b6040516103079190611ff9565b60405180910390f35b610318610aeb565b6040516103259190611f33565b60405180910390f35b610336610b79565b6040516103439190611f33565b60405180910390f35b61036660048036038101906103619190612236565b610c0b565b005b610382600480360381019061037d9190611f8b565b610c21565b005b61039e60048036038101906103999190611f8b565b610ca3565b6040516103ab9190611ff9565b60405180910390f35b6103ce60048036038101906103c991906123ab565b610ce0565b005b6103ea60048036038101906103e59190611f8b565b610d05565b6040516103f79190611f33565b60405180910390f35b61041a6004803603810190610415919061242e565b610d6e565b6040516104279190611e88565b60405180910390f35b61044a600480360381019061044591906121b3565b610e02565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061051757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610527575061052682610e88565b5b9050919050565b60606000805461053d9061249d565b80601f01602080910402602001604051908101604052809291908181526020018280546105699061249d565b80156105b65780601f1061058b576101008083540402835291602001916105b6565b820191906000526020600020905b81548152906001019060200180831161059957829003601f168201915b5050505050905090565b60006105cb82610ef2565b506105d582610f7a565b9050919050565b6105ee82826105e9610fb7565b610fbf565b5050565b60076000815480929190610605906124fd565b919050555061061633600754610fd1565b6008339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503360096000600754815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107415760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016107389190611ff9565b60405180910390fd5b60006107558383610750610fb7565b6110ca565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146107cb578382826040517f64283d7b0000000000000000000000000000000000000000000000000000000081526004016107c293929190612545565b60405180910390fd5b50505050565b6107ec83838360405180602001604052806000815250610ce0565b505050565b6060600a80546108009061249d565b80601f016020809104026020016040519081016040528092919081815260200182805461082c9061249d565b80156108795780601f1061084e57610100808354040283529160200191610879565b820191906000526020600020905b81548152906001019060200180831161085c57829003601f168201915b5050505050905090565b6060600880548060200260200160405190810160405280929190818152602001828054801561090757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116108bd575b5050505050905090565b600061091b6112e4565b600060088054905011610963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095a906125c8565b60405180910390fd5b600060088054905060014361097891906125e8565b4060001c610986919061264b565b905060006008828154811061099e5761099d61267c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600860006109d99190611d96565b809250505090565b60006109ec82610ef2565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a665760006040517f89c62b64000000000000000000000000000000000000000000000000000000008152600401610a5d9190611ff9565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610ab56112e4565b610abf600061136b565b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600a8054610af89061249d565b80601f0160208091040260200160405190810160405280929190818152602001828054610b249061249d565b8015610b715780601f10610b4657610100808354040283529160200191610b71565b820191906000526020600020905b815481529060010190602001808311610b5457829003601f168201915b505050505081565b606060018054610b889061249d565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb49061249d565b8015610c015780601f10610bd657610100808354040283529160200191610c01565b820191906000526020600020905b815481529060010190602001808311610be457829003601f168201915b5050505050905090565b610c1d610c16610fb7565b8383611431565b5050565b3373ffffffffffffffffffffffffffffffffffffffff16610c41826109e1565b73ffffffffffffffffffffffffffffffffffffffff1614610c97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8e906126f7565b60405180910390fd5b610ca0816115a0565b50565b60006009600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610ceb8484846106cf565b610cff610cf6610fb7565b85858585611626565b50505050565b6060610d1082610ef2565b506000610d1b6117d7565b90506000815111610d3b5760405180602001604052806000815250610d66565b80610d45846117ee565b604051602001610d56929190612753565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610e0a6112e4565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e7c5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610e739190611ff9565b60405180910390fd5b610e858161136b565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080610efe836118bc565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f7157826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401610f6891906121ef565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b610fcc83838360016118f9565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036110435760006040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161103a9190611ff9565b60405180910390fd5b6000611051838360006110ca565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146110c55760006040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016110bc9190611ff9565b60405180910390fd5b505050565b6000806110d6846118bc565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461111857611117818486611abe565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146111a95761115a6000856000806118f9565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161461122c576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b6112ec610fb7565b73ffffffffffffffffffffffffffffffffffffffff1661130a610ac1565b73ffffffffffffffffffffffffffffffffffffffff16146113695761132d610fb7565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016113609190611ff9565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036114a257816040517f5b08ba180000000000000000000000000000000000000000000000000000000081526004016114999190611ff9565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115939190611e88565b60405180910390a3505050565b60006115af60008360006110ca565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361162257816040517f7e27328900000000000000000000000000000000000000000000000000000000815260040161161991906121ef565b60405180910390fd5b5050565b60008373ffffffffffffffffffffffffffffffffffffffff163b11156117d0578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02868685856040518563ffffffff1660e01b815260040161168594939291906127cc565b6020604051808303816000875af19250505080156116c157506040513d601f19601f820116820180604052508101906116be919061282d565b60015b611745573d80600081146116f1576040519150601f19603f3d011682016040523d82523d6000602084013e6116f6565b606091505b50600081510361173d57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016117349190611ff9565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146117ce57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016117c59190611ff9565b60405180910390fd5b505b5050505050565b606060405180602001604052806000815250905090565b6060600060016117fd84611b82565b01905060008167ffffffffffffffff81111561181c5761181b612280565b5b6040519080825280601f01601f19166020018201604052801561184e5781602001600182028036833780820191505090505b509050600082602001820190505b6001156118b1578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816118a5576118a461261c565b5b0494506000850361185c575b819350505050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b80806119325750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15611a6657600061194284610ef2565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156119ad57508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156119c057506119be8184610d6e565b155b15611a0257826040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526004016119f99190611ff9565b60405180910390fd5b8115611a6457838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b611ac9838383611cd5565b611b7d57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611b3e57806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611b3591906121ef565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401611b7492919061285a565b60405180910390fd5b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611be0577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611bd657611bd561261c565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611c1d576d04ee2d6d415b85acef81000000008381611c1357611c1261261c565b5b0492506020810190505b662386f26fc100008310611c4c57662386f26fc100008381611c4257611c4161261c565b5b0492506010810190505b6305f5e1008310611c75576305f5e1008381611c6b57611c6a61261c565b5b0492506008810190505b6127108310611c9a576127108381611c9057611c8f61261c565b5b0492506004810190505b60648310611cbd5760648381611cb357611cb261261c565b5b0492506002810190505b600a8310611ccc576001810190505b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611d8d57508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611d4e5750611d4d8484610d6e565b5b80611d8c57508273ffffffffffffffffffffffffffffffffffffffff16611d7483610f7a565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b5080546000825590600052602060002090810190611db49190611db7565b50565b5b80821115611dd0576000816000905550600101611db8565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611e1d81611de8565b8114611e2857600080fd5b50565b600081359050611e3a81611e14565b92915050565b600060208284031215611e5657611e55611dde565b5b6000611e6484828501611e2b565b91505092915050565b60008115159050919050565b611e8281611e6d565b82525050565b6000602082019050611e9d6000830184611e79565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611edd578082015181840152602081019050611ec2565b60008484015250505050565b6000601f19601f8301169050919050565b6000611f0582611ea3565b611f0f8185611eae565b9350611f1f818560208601611ebf565b611f2881611ee9565b840191505092915050565b60006020820190508181036000830152611f4d8184611efa565b905092915050565b6000819050919050565b611f6881611f55565b8114611f7357600080fd5b50565b600081359050611f8581611f5f565b92915050565b600060208284031215611fa157611fa0611dde565b5b6000611faf84828501611f76565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611fe382611fb8565b9050919050565b611ff381611fd8565b82525050565b600060208201905061200e6000830184611fea565b92915050565b61201d81611fd8565b811461202857600080fd5b50565b60008135905061203a81612014565b92915050565b6000806040838503121561205757612056611dde565b5b60006120658582860161202b565b925050602061207685828601611f76565b9150509250929050565b60008060006060848603121561209957612098611dde565b5b60006120a78682870161202b565b93505060206120b88682870161202b565b92505060406120c986828701611f76565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61210881611fd8565b82525050565b600061211a83836120ff565b60208301905092915050565b6000602082019050919050565b600061213e826120d3565b61214881856120de565b9350612153836120ef565b8060005b8381101561218457815161216b888261210e565b975061217683612126565b925050600181019050612157565b5085935050505092915050565b600060208201905081810360008301526121ab8184612133565b905092915050565b6000602082840312156121c9576121c8611dde565b5b60006121d78482850161202b565b91505092915050565b6121e981611f55565b82525050565b600060208201905061220460008301846121e0565b92915050565b61221381611e6d565b811461221e57600080fd5b50565b6000813590506122308161220a565b92915050565b6000806040838503121561224d5761224c611dde565b5b600061225b8582860161202b565b925050602061226c85828601612221565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6122b882611ee9565b810181811067ffffffffffffffff821117156122d7576122d6612280565b5b80604052505050565b60006122ea611dd4565b90506122f682826122af565b919050565b600067ffffffffffffffff82111561231657612315612280565b5b61231f82611ee9565b9050602081019050919050565b82818337600083830152505050565b600061234e612349846122fb565b6122e0565b90508281526020810184848401111561236a5761236961227b565b5b61237584828561232c565b509392505050565b600082601f83011261239257612391612276565b5b81356123a284826020860161233b565b91505092915050565b600080600080608085870312156123c5576123c4611dde565b5b60006123d38782880161202b565b94505060206123e48782880161202b565b93505060406123f587828801611f76565b925050606085013567ffffffffffffffff81111561241657612415611de3565b5b6124228782880161237d565b91505092959194509250565b6000806040838503121561244557612444611dde565b5b60006124538582860161202b565b92505060206124648582860161202b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806124b557607f821691505b6020821081036124c8576124c761246e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061250882611f55565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361253a576125396124ce565b5b600182019050919050565b600060608201905061255a6000830186611fea565b61256760208301856121e0565b6125746040830184611fea565b949350505050565b7f4e6f207061727469636970616e747320696e2074686520726166666c65000000600082015250565b60006125b2601d83611eae565b91506125bd8261257c565b602082019050919050565b600060208201905081810360008301526125e1816125a5565b9050919050565b60006125f382611f55565b91506125fe83611f55565b9250828203905081811115612616576126156124ce565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061265682611f55565b915061266183611f55565b9250826126715761267061261c565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f7420746865207469636b6574206f776e6572000000000000000000000000600082015250565b60006126e1601483611eae565b91506126ec826126ab565b602082019050919050565b60006020820190508181036000830152612710816126d4565b9050919050565b600081905092915050565b600061272d82611ea3565b6127378185612717565b9350612747818560208601611ebf565b80840191505092915050565b600061275f8285612722565b915061276b8284612722565b91508190509392505050565b600081519050919050565b600082825260208201905092915050565b600061279e82612777565b6127a88185612782565b93506127b8818560208601611ebf565b6127c181611ee9565b840191505092915050565b60006080820190506127e16000830187611fea565b6127ee6020830186611fea565b6127fb60408301856121e0565b818103606083015261280d8184612793565b905095945050505050565b60008151905061282781611e14565b92915050565b60006020828403121561284357612842611dde565b5b600061285184828501612818565b91505092915050565b600060408201905061286f6000830185611fea565b61287c60208301846121e0565b939250505056fea264697066735822122090871e76df482fabd48dee3c269ae2cd4c2c79f300d1606275c6270b1393941364736f6c634300081d0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BURNTICKET = "burnTicket";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETPARTICIPANTS = "getParticipants";

    public static final String FUNC_GETRAFFLENAME = "getRaffleName";

    public static final String FUNC_GETTICKETOWNER = "getTicketOwner";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINTRAFFLETICKET = "mintRaffleTicket";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_PICKWINNER = "pickWinner";

    public static final String FUNC_RAFFLENAME = "raffleName";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected HappyRaffleNFT(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected HappyRaffleNFT(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected HappyRaffleNFT(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected HappyRaffleNFT(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
        ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalForAllEventFromLog(log));
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burnTicket(BigInteger tokenId) {
        final Function function = new Function(
                FUNC_BURNTICKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getParticipants() {
        final Function function = new Function(FUNC_GETPARTICIPANTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> getRaffleName() {
        final Function function = new Function(FUNC_GETRAFFLENAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getTicketOwner(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETTICKETOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mintRaffleTicket() {
        final Function function = new Function(
                FUNC_MINTRAFFLETICKET, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final Function function = new Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pickWinner() {
        final Function function = new Function(
                FUNC_PICKWINNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> raffleName() {
        final Function function = new Function(FUNC_RAFFLENAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to,
            BigInteger tokenId) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to,
            BigInteger tokenId, byte[] data) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator,
            Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final Function function = new Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to,
            BigInteger tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static HappyRaffleNFT load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new HappyRaffleNFT(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static HappyRaffleNFT load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new HappyRaffleNFT(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static HappyRaffleNFT load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new HappyRaffleNFT(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static HappyRaffleNFT load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new HappyRaffleNFT(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<HappyRaffleNFT> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider, String _raffleName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_raffleName)));
        return deployRemoteCall(HappyRaffleNFT.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<HappyRaffleNFT> deploy(Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider,
            String _raffleName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_raffleName)));
        return deployRemoteCall(HappyRaffleNFT.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<HappyRaffleNFT> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit, String _raffleName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_raffleName)));
        return deployRemoteCall(HappyRaffleNFT.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<HappyRaffleNFT> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit,
            String _raffleName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_raffleName)));
        return deployRemoteCall(HappyRaffleNFT.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
