package com.happy.block.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.3.
 */
@SuppressWarnings("rawtypes")
public class HappyRaffleNFT extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b506040516131ff3803806131ff83398181016040528101906100329190610394565b336040518060400160405280600981526020017f526166666c654e465400000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f524146464c45000000000000000000000000000000000000000000000000000081525081600090816100ae91906105fe565b5080600190816100be91906105fe565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101335760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161012a9190610711565b60405180910390fd5b6101428161015960201b60201c565b5080600a908161015291906105fe565b505061072c565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102868261023d565b810181811067ffffffffffffffff821117156102a5576102a461024e565b5b80604052505050565b60006102b861021f565b90506102c4828261027d565b919050565b600067ffffffffffffffff8211156102e4576102e361024e565b5b6102ed8261023d565b9050602081019050919050565b60005b838110156103185780820151818401526020810190506102fd565b60008484015250505050565b6000610337610332846102c9565b6102ae565b90508281526020810184848401111561035357610352610238565b5b61035e8482856102fa565b509392505050565b600082601f83011261037b5761037a610233565b5b815161038b848260208601610324565b91505092915050565b6000602082840312156103aa576103a9610229565b5b600082015167ffffffffffffffff8111156103c8576103c761022e565b5b6103d484828501610366565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061042f57607f821691505b602082108103610442576104416103e8565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026104aa7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261046d565b6104b4868361046d565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006104fb6104f66104f1846104cc565b6104d6565b6104cc565b9050919050565b6000819050919050565b610515836104e0565b61052961052182610502565b84845461047a565b825550505050565b600090565b61053e610531565b61054981848461050c565b505050565b5b8181101561056d57610562600082610536565b60018101905061054f565b5050565b601f8211156105b25761058381610448565b61058c8461045d565b8101602085101561059b578190505b6105af6105a78561045d565b83018261054e565b50505b505050565b600082821c905092915050565b60006105d5600019846008026105b7565b1980831691505092915050565b60006105ee83836105c4565b9150826002028217905092915050565b610607826103dd565b67ffffffffffffffff8111156106205761061f61024e565b5b61062a8254610417565b610635828285610571565b600060209050601f8311600181146106685760008415610656578287015190505b61066085826105e2565b8655506106c8565b601f19841661067686610448565b60005b8281101561069e57848901518255600182019150602085019450602081019050610679565b868310156106bb57848901516106b7601f8916826105c4565b8355505b6001600288020188555050505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106fb826106d0565b9050919050565b61070b816106f0565b82525050565b60006020820190506107266000830184610702565b92915050565b612ac48061073b6000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c8063715018a6116100de578063a476b73d11610097578063c87b56dd11610071578063c87b56dd14610414578063dfbf53ae14610444578063e985e9c514610462578063f2fde38b1461049257610173565b8063a476b73d146103ac578063ad093409146103c8578063b88d4fde146103f857610173565b8063715018a61461030e5780638da5cb5b146103185780638e5b1d99146103365780638e7ea5b21461035457806395d89b4114610372578063a22cb4651461039057610173565b806342842e0e1161013057806342842e0e1461023857806357692d0c146102545780635aa68ac0146102725780635d495aea146102905780636352211e146102ae57806370a08231146102de57610173565b806301ffc9a71461017857806306fdde03146101a8578063081812fc146101c6578063095ea7b3146101f6578063144a27d61461021257806323b872dd1461021c575b600080fd5b610192600480360381019061018d9190611fdf565b6104ae565b60405161019f9190612027565b60405180910390f35b6101b0610590565b6040516101bd91906120d2565b60405180910390f35b6101e060048036038101906101db919061212a565b610622565b6040516101ed9190612198565b60405180910390f35b610210600480360381019061020b91906121df565b61063e565b005b61021a610654565b005b6102366004803603810190610231919061221f565b610731565b005b610252600480360381019061024d919061221f565b610833565b005b61025c610853565b60405161026991906120d2565b60405180910390f35b61027a6108e5565b6040516102879190612330565b60405180910390f35b610298610973565b6040516102a59190612198565b60405180910390f35b6102c860048036038101906102c3919061212a565b610aa0565b6040516102d59190612198565b60405180910390f35b6102f860048036038101906102f39190612352565b610ab2565b604051610305919061238e565b60405180910390f35b610316610b6c565b005b610320610b80565b60405161032d9190612198565b60405180910390f35b61033e610baa565b60405161034b91906120d2565b60405180910390f35b61035c610c38565b6040516103699190612198565b60405180910390f35b61037a610cf2565b60405161038791906120d2565b60405180910390f35b6103aa60048036038101906103a591906123d5565b610d84565b005b6103c660048036038101906103c1919061212a565b610d9a565b005b6103e260048036038101906103dd919061212a565b610e1c565b6040516103ef9190612198565b60405180910390f35b610412600480360381019061040d919061254a565b610e59565b005b61042e6004803603810190610429919061212a565b610e7e565b60405161043b91906120d2565b60405180910390f35b61044c610ee7565b6040516104599190612198565b60405180910390f35b61047c600480360381019061047791906125cd565b610f0d565b6040516104899190612027565b60405180910390f35b6104ac60048036038101906104a79190612352565b610fa1565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061057957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610589575061058882611027565b5b9050919050565b60606000805461059f9061263c565b80601f01602080910402602001604051908101604052809291908181526020018280546105cb9061263c565b80156106185780601f106105ed57610100808354040283529160200191610618565b820191906000526020600020905b8154815290600101906020018083116105fb57829003601f168201915b5050505050905090565b600061062d82611091565b5061063782611119565b9050919050565b610650828261064b611156565b61115e565b5050565b600760008154809291906106679061269c565b919050555061067833600754611170565b6008339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503360096000600754815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107a35760006040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161079a9190612198565b60405180910390fd5b60006107b783836107b2611156565b611269565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461082d578382826040517f64283d7b000000000000000000000000000000000000000000000000000000008152600401610824939291906126e4565b60405180910390fd5b50505050565b61084e83838360405180602001604052806000815250610e59565b505050565b6060600a80546108629061263c565b80601f016020809104026020016040519081016040528092919081815260200182805461088e9061263c565b80156108db5780601f106108b0576101008083540402835291602001916108db565b820191906000526020600020905b8154815290600101906020018083116108be57829003601f168201915b5050505050905090565b6060600880548060200260200160405190810160405280929190818152602001828054801561096957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161091f575b5050505050905090565b600061097d611483565b6000600880549050116109c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109bc90612767565b60405180910390fd5b60006008805490506001436109da9190612787565b4060001c6109e891906127ea565b9050600881815481106109fe576109fd61281b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060086000610a779190611f35565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6000610aab82611091565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b255760006040517f89c62b64000000000000000000000000000000000000000000000000000000008152600401610b1c9190612198565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610b74611483565b610b7e600061150a565b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600a8054610bb79061263c565b80601f0160208091040260200160405190810160405280929190818152602001828054610be39061263c565b8015610c305780601f10610c0557610100808354040283529160200191610c30565b820191906000526020600020905b815481529060010190602001808311610c1357829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff16600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610cca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc190612896565b60405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610d019061263c565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2d9061263c565b8015610d7a5780601f10610d4f57610100808354040283529160200191610d7a565b820191906000526020600020905b815481529060010190602001808311610d5d57829003601f168201915b5050505050905090565b610d96610d8f611156565b83836115d0565b5050565b3373ffffffffffffffffffffffffffffffffffffffff16610dba82610aa0565b73ffffffffffffffffffffffffffffffffffffffff1614610e10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0790612902565b60405180910390fd5b610e198161173f565b50565b60006009600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b610e64848484610731565b610e78610e6f611156565b858585856117c5565b50505050565b6060610e8982611091565b506000610e94611976565b90506000815111610eb45760405180602001604052806000815250610edf565b80610ebe8461198d565b604051602001610ecf92919061295e565b6040516020818303038152906040525b915050919050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610fa9611483565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361101b5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016110129190612198565b60405180910390fd5b6110248161150a565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008061109d83611a5b565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361111057826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611107919061238e565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b61116b8383836001611a98565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036111e25760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016111d99190612198565b60405180910390fd5b60006111f083836000611269565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146112645760006040517f73c6ac6e00000000000000000000000000000000000000000000000000000000815260040161125b9190612198565b60405180910390fd5b505050565b60008061127584611a5b565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146112b7576112b6818486611c5d565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611348576112f9600085600080611a98565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146113cb576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b61148b611156565b73ffffffffffffffffffffffffffffffffffffffff166114a9610b80565b73ffffffffffffffffffffffffffffffffffffffff1614611508576114cc611156565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016114ff9190612198565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361164157816040517f5b08ba180000000000000000000000000000000000000000000000000000000081526004016116389190612198565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516117329190612027565b60405180910390a3505050565b600061174e6000836000611269565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036117c157816040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016117b8919061238e565b60405180910390fd5b5050565b60008373ffffffffffffffffffffffffffffffffffffffff163b111561196f578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02868685856040518563ffffffff1660e01b815260040161182494939291906129d7565b6020604051808303816000875af192505050801561186057506040513d601f19601f8201168201806040525081019061185d9190612a38565b60015b6118e4573d8060008114611890576040519150601f19603f3d011682016040523d82523d6000602084013e611895565b606091505b5060008151036118dc57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016118d39190612198565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461196d57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016119649190612198565b60405180910390fd5b505b5050505050565b606060405180602001604052806000815250905090565b60606000600161199c84611d21565b01905060008167ffffffffffffffff8111156119bb576119ba61241f565b5b6040519080825280601f01601f1916602001820160405280156119ed5781602001600182028036833780820191505090505b509050600082602001820190505b600115611a50578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611a4457611a436127bb565b5b049450600085036119fb575b819350505050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8080611ad15750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15611c05576000611ae184611091565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611b4c57508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015611b5f5750611b5d8184610f0d565b155b15611ba157826040517fa9fbf51f000000000000000000000000000000000000000000000000000000008152600401611b989190612198565b60405180910390fd5b8115611c0357838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b611c68838383611e74565b611d1c57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611cdd57806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611cd4919061238e565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401611d13929190612a65565b60405180910390fd5b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611d7f577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611d7557611d746127bb565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611dbc576d04ee2d6d415b85acef81000000008381611db257611db16127bb565b5b0492506020810190505b662386f26fc100008310611deb57662386f26fc100008381611de157611de06127bb565b5b0492506010810190505b6305f5e1008310611e14576305f5e1008381611e0a57611e096127bb565b5b0492506008810190505b6127108310611e39576127108381611e2f57611e2e6127bb565b5b0492506004810190505b60648310611e5c5760648381611e5257611e516127bb565b5b0492506002810190505b600a8310611e6b576001810190505b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611f2c57508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611eed5750611eec8484610f0d565b5b80611f2b57508273ffffffffffffffffffffffffffffffffffffffff16611f1383611119565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b5080546000825590600052602060002090810190611f539190611f56565b50565b5b80821115611f6f576000816000905550600101611f57565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611fbc81611f87565b8114611fc757600080fd5b50565b600081359050611fd981611fb3565b92915050565b600060208284031215611ff557611ff4611f7d565b5b600061200384828501611fca565b91505092915050565b60008115159050919050565b6120218161200c565b82525050565b600060208201905061203c6000830184612018565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561207c578082015181840152602081019050612061565b60008484015250505050565b6000601f19601f8301169050919050565b60006120a482612042565b6120ae818561204d565b93506120be81856020860161205e565b6120c781612088565b840191505092915050565b600060208201905081810360008301526120ec8184612099565b905092915050565b6000819050919050565b612107816120f4565b811461211257600080fd5b50565b600081359050612124816120fe565b92915050565b6000602082840312156121405761213f611f7d565b5b600061214e84828501612115565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061218282612157565b9050919050565b61219281612177565b82525050565b60006020820190506121ad6000830184612189565b92915050565b6121bc81612177565b81146121c757600080fd5b50565b6000813590506121d9816121b3565b92915050565b600080604083850312156121f6576121f5611f7d565b5b6000612204858286016121ca565b925050602061221585828601612115565b9150509250929050565b60008060006060848603121561223857612237611f7d565b5b6000612246868287016121ca565b9350506020612257868287016121ca565b925050604061226886828701612115565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6122a781612177565b82525050565b60006122b9838361229e565b60208301905092915050565b6000602082019050919050565b60006122dd82612272565b6122e7818561227d565b93506122f28361228e565b8060005b8381101561232357815161230a88826122ad565b9750612315836122c5565b9250506001810190506122f6565b5085935050505092915050565b6000602082019050818103600083015261234a81846122d2565b905092915050565b60006020828403121561236857612367611f7d565b5b6000612376848285016121ca565b91505092915050565b612388816120f4565b82525050565b60006020820190506123a3600083018461237f565b92915050565b6123b28161200c565b81146123bd57600080fd5b50565b6000813590506123cf816123a9565b92915050565b600080604083850312156123ec576123eb611f7d565b5b60006123fa858286016121ca565b925050602061240b858286016123c0565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61245782612088565b810181811067ffffffffffffffff821117156124765761247561241f565b5b80604052505050565b6000612489611f73565b9050612495828261244e565b919050565b600067ffffffffffffffff8211156124b5576124b461241f565b5b6124be82612088565b9050602081019050919050565b82818337600083830152505050565b60006124ed6124e88461249a565b61247f565b9050828152602081018484840111156125095761250861241a565b5b6125148482856124cb565b509392505050565b600082601f83011261253157612530612415565b5b81356125418482602086016124da565b91505092915050565b6000806000806080858703121561256457612563611f7d565b5b6000612572878288016121ca565b9450506020612583878288016121ca565b935050604061259487828801612115565b925050606085013567ffffffffffffffff8111156125b5576125b4611f82565b5b6125c18782880161251c565b91505092959194509250565b600080604083850312156125e4576125e3611f7d565b5b60006125f2858286016121ca565b9250506020612603858286016121ca565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061265457607f821691505b6020821081036126675761266661260d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006126a7826120f4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036126d9576126d861266d565b5b600182019050919050565b60006060820190506126f96000830186612189565b612706602083018561237f565b6127136040830184612189565b949350505050565b7f4e6f207061727469636970616e747320696e2074686520726166666c65000000600082015250565b6000612751601d8361204d565b915061275c8261271b565b602082019050919050565b6000602082019050818103600083015261278081612744565b9050919050565b6000612792826120f4565b915061279d836120f4565b92508282039050818111156127b5576127b461266d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006127f5826120f4565b9150612800836120f4565b9250826128105761280f6127bb565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f2077696e6e657220686173206265656e207069636b656420796574000000600082015250565b6000612880601d8361204d565b915061288b8261284a565b602082019050919050565b600060208201905081810360008301526128af81612873565b9050919050565b7f4e6f7420746865207469636b6574206f776e6572000000000000000000000000600082015250565b60006128ec60148361204d565b91506128f7826128b6565b602082019050919050565b6000602082019050818103600083015261291b816128df565b9050919050565b600081905092915050565b600061293882612042565b6129428185612922565b935061295281856020860161205e565b80840191505092915050565b600061296a828561292d565b9150612976828461292d565b91508190509392505050565b600081519050919050565b600082825260208201905092915050565b60006129a982612982565b6129b3818561298d565b93506129c381856020860161205e565b6129cc81612088565b840191505092915050565b60006080820190506129ec6000830187612189565b6129f96020830186612189565b612a06604083018561237f565b8181036060830152612a18818461299e565b905095945050505050565b600081519050612a3281611fb3565b92915050565b600060208284031215612a4e57612a4d611f7d565b5b6000612a5c84828501612a23565b91505092915050565b6000604082019050612a7a6000830185612189565b612a87602083018461237f565b939250505056fea2646970667358221220f72eaaaf1100322bb05b8d1ac6f12ddce7fe7607c9b33de1eb398494cf85c4a064736f6c634300081d0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BURNTICKET = "burnTicket";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETPARTICIPANTS = "getParticipants";

    public static final String FUNC_GETRAFFLENAME = "getRaffleName";

    public static final String FUNC_GETTICKETOWNER = "getTicketOwner";

    public static final String FUNC_GETWINNER = "getWinner";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINTRAFFLETICKET = "mintRaffleTicket";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_PICKWINNER = "pickWinner";

    public static final String FUNC_RAFFLENAME = "raffleName";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_WINNER = "winner";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected HappyRaffleNFT(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected HappyRaffleNFT(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected HappyRaffleNFT(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected HappyRaffleNFT(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
        ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalForAllEventFromLog(log));
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burnTicket(BigInteger tokenId) {
        final Function function = new Function(
                FUNC_BURNTICKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getParticipants() {
        final Function function = new Function(FUNC_GETPARTICIPANTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> getRaffleName() {
        final Function function = new Function(FUNC_GETRAFFLENAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getTicketOwner(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETTICKETOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getWinner() {
        final Function function = new Function(FUNC_GETWINNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mintRaffleTicket() {
        final Function function = new Function(
                FUNC_MINTRAFFLETICKET, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final Function function = new Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pickWinner() {
        final Function function = new Function(
                FUNC_PICKWINNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> raffleName() {
        final Function function = new Function(FUNC_RAFFLENAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to,
            BigInteger tokenId) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to,
            BigInteger tokenId, byte[] data) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator,
            Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final Function function = new Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to,
            BigInteger tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> winner() {
        final Function function = new Function(FUNC_WINNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static HappyRaffleNFT load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new HappyRaffleNFT(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static HappyRaffleNFT load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new HappyRaffleNFT(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static HappyRaffleNFT load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new HappyRaffleNFT(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static HappyRaffleNFT load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new HappyRaffleNFT(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<HappyRaffleNFT> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider, String _raffleName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_raffleName)));
        return deployRemoteCall(HappyRaffleNFT.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<HappyRaffleNFT> deploy(Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider,
            String _raffleName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_raffleName)));
        return deployRemoteCall(HappyRaffleNFT.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<HappyRaffleNFT> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit, String _raffleName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_raffleName)));
        return deployRemoteCall(HappyRaffleNFT.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<HappyRaffleNFT> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit,
            String _raffleName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_raffleName)));
        return deployRemoteCall(HappyRaffleNFT.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
