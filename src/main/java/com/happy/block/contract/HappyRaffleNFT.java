package com.happy.block.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.3.
 */
@SuppressWarnings("rawtypes")
public class HappyRaffleNFT extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b5060405161347e38038061347e83398181016040528101906100329190610394565b336040518060400160405280600981526020017f526166666c654e465400000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f524146464c45000000000000000000000000000000000000000000000000000081525081600090816100ae91906105fe565b5080600190816100be91906105fe565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036101335760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161012a9190610711565b60405180910390fd5b6101428161015960201b60201c565b5080600a908161015291906105fe565b505061072c565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102868261023d565b810181811067ffffffffffffffff821117156102a5576102a461024e565b5b80604052505050565b60006102b861021f565b90506102c4828261027d565b919050565b600067ffffffffffffffff8211156102e4576102e361024e565b5b6102ed8261023d565b9050602081019050919050565b60005b838110156103185780820151818401526020810190506102fd565b60008484015250505050565b6000610337610332846102c9565b6102ae565b90508281526020810184848401111561035357610352610238565b5b61035e8482856102fa565b509392505050565b600082601f83011261037b5761037a610233565b5b815161038b848260208601610324565b91505092915050565b6000602082840312156103aa576103a9610229565b5b600082015167ffffffffffffffff8111156103c8576103c761022e565b5b6103d484828501610366565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061042f57607f821691505b602082108103610442576104416103e8565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026104aa7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261046d565b6104b4868361046d565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006104fb6104f66104f1846104cc565b6104d6565b6104cc565b9050919050565b6000819050919050565b610515836104e0565b61052961052182610502565b84845461047a565b825550505050565b600090565b61053e610531565b61054981848461050c565b505050565b5b8181101561056d57610562600082610536565b60018101905061054f565b5050565b601f8211156105b25761058381610448565b61058c8461045d565b8101602085101561059b578190505b6105af6105a78561045d565b83018261054e565b50505b505050565b600082821c905092915050565b60006105d5600019846008026105b7565b1980831691505092915050565b60006105ee83836105c4565b9150826002028217905092915050565b610607826103dd565b67ffffffffffffffff8111156106205761061f61024e565b5b61062a8254610417565b610635828285610571565b600060209050601f8311600181146106685760008415610656578287015190505b61066085826105e2565b8655506106c8565b601f19841661067686610448565b60005b8281101561069e57848901518255600182019150602085019450602081019050610679565b868310156106bb57848901516106b7601f8916826105c4565b8355505b6001600288020188555050505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106fb826106d0565b9050919050565b61070b816106f0565b82525050565b60006020820190506107266000830184610702565b92915050565b612d438061073b6000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c8063715018a6116100de578063a476b73d11610097578063c87b56dd11610071578063c87b56dd14610414578063dfbf53ae14610444578063e985e9c514610462578063f2fde38b1461049257610173565b8063a476b73d146103ac578063ad093409146103c8578063b88d4fde146103f857610173565b8063715018a61461030e5780638da5cb5b146103185780638e5b1d99146103365780638e7ea5b21461035457806395d89b4114610372578063a22cb4651461039057610173565b806342842e0e1161013057806342842e0e1461023857806357692d0c146102545780635aa68ac0146102725780635d495aea146102905780636352211e146102ae57806370a08231146102de57610173565b806301ffc9a71461017857806306fdde03146101a8578063081812fc146101c6578063095ea7b3146101f6578063144a27d61461021257806323b872dd1461021c575b600080fd5b610192600480360381019061018d9190612189565b6104ae565b60405161019f91906121d1565b60405180910390f35b6101b0610590565b6040516101bd919061227c565b60405180910390f35b6101e060048036038101906101db91906122d4565b610622565b6040516101ed9190612342565b60405180910390f35b610210600480360381019061020b9190612389565b61063e565b005b61021a610654565b005b610236600480360381019061023191906123c9565b610731565b005b610252600480360381019061024d91906123c9565b610833565b005b61025c610853565b604051610269919061227c565b60405180910390f35b61027a6108e5565b60405161028791906124da565b60405180910390f35b610298610973565b6040516102a59190612342565b60405180910390f35b6102c860048036038101906102c391906122d4565b610ac3565b6040516102d59190612342565b60405180910390f35b6102f860048036038101906102f391906124fc565b610ad5565b6040516103059190612538565b60405180910390f35b610316610b8f565b005b610320610ba3565b60405161032d9190612342565b60405180910390f35b61033e610bcd565b60405161034b919061227c565b60405180910390f35b61035c610c5b565b6040516103699190612342565b60405180910390f35b61037a610d15565b604051610387919061227c565b60405180910390f35b6103aa60048036038101906103a5919061257f565b610da7565b005b6103c660048036038101906103c191906122d4565b610dbd565b005b6103e260048036038101906103dd91906122d4565b610fc6565b6040516103ef9190612342565b60405180910390f35b610412600480360381019061040d91906126f4565b611003565b005b61042e600480360381019061042991906122d4565b611028565b60405161043b919061227c565b60405180910390f35b61044c611091565b6040516104599190612342565b60405180910390f35b61047c60048036038101906104779190612777565b6110b7565b60405161048991906121d1565b60405180910390f35b6104ac60048036038101906104a791906124fc565b61114b565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061057957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105895750610588826111d1565b5b9050919050565b60606000805461059f906127e6565b80601f01602080910402602001604051908101604052809291908181526020018280546105cb906127e6565b80156106185780601f106105ed57610100808354040283529160200191610618565b820191906000526020600020905b8154815290600101906020018083116105fb57829003601f168201915b5050505050905090565b600061062d8261123b565b50610637826112c3565b9050919050565b610650828261064b611300565b611308565b5050565b6007600081548092919061066790612846565b91905055506106783360075461131a565b6008339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503360096000600754815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107a35760006040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161079a9190612342565b60405180910390fd5b60006107b783836107b2611300565b611413565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461082d578382826040517f64283d7b0000000000000000000000000000000000000000000000000000000081526004016108249392919061288e565b60405180910390fd5b50505050565b61084e83838360405180602001604052806000815250611003565b505050565b6060600a8054610862906127e6565b80601f016020809104026020016040519081016040528092919081815260200182805461088e906127e6565b80156108db5780601f106108b0576101008083540402835291602001916108db565b820191906000526020600020905b8154815290600101906020018083116108be57829003601f168201915b5050505050905090565b6060600880548060200260200160405190810160405280929190818152602001828054801561096957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161091f575b5050505050905090565b600061097d61162d565b6000600880549050116109c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109bc90612911565b60405180910390fd5b60004244336040516020016109dc9392919061299a565b6040516020818303038152906040528051906020012060001c9050600060088054905082610a0a9190612a06565b905060088181548110610a2057610a1f612a37565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060086000610a9991906120df565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250505090565b6000610ace8261123b565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b485760006040517f89c62b64000000000000000000000000000000000000000000000000000000008152600401610b3f9190612342565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610b9761162d565b610ba160006116b4565b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600a8054610bda906127e6565b80601f0160208091040260200160405190810160405280929190818152602001828054610c06906127e6565b8015610c535780601f10610c2857610100808354040283529160200191610c53565b820191906000526020600020905b815481529060010190602001808311610c3657829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff16600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610ced576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce490612ab2565b60405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610d24906127e6565b80601f0160208091040260200160405190810160405280929190818152602001828054610d50906127e6565b8015610d9d5780601f10610d7257610100808354040283529160200191610d9d565b820191906000526020600020905b815481529060010190602001808311610d8057829003601f168201915b5050505050905090565b610db9610db2611300565b838361177a565b5050565b3373ffffffffffffffffffffffffffffffffffffffff16610ddd82610ac3565b73ffffffffffffffffffffffffffffffffffffffff1614610e33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2a90612b1e565b60405180910390fd5b60005b600880549050811015610fb9573373ffffffffffffffffffffffffffffffffffffffff1660088281548110610e6e57610e6d612a37565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610fac5760086001600880549050610ec89190612b3e565b81548110610ed957610ed8612a37565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660088281548110610f1857610f17612a37565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506008805480610f7257610f71612b72565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055610fb9565b8080600101915050610e36565b50610fc3816118e9565b50565b60006009600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b61100e848484610731565b611022611019611300565b8585858561196f565b50505050565b60606110338261123b565b50600061103e611b20565b9050600081511161105e5760405180602001604052806000815250611089565b8061106884611b37565b604051602001611079929190612bdd565b6040516020818303038152906040525b915050919050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61115361162d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036111c55760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016111bc9190612342565b60405180910390fd5b6111ce816116b4565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008061124783611c05565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036112ba57826040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016112b19190612538565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b6113158383836001611c42565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361138c5760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016113839190612342565b60405180910390fd5b600061139a83836000611413565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461140e5760006040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016114059190612342565b60405180910390fd5b505050565b60008061141f84611c05565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461146157611460818486611e07565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146114f2576114a3600085600080611c42565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611575576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b611635611300565b73ffffffffffffffffffffffffffffffffffffffff16611653610ba3565b73ffffffffffffffffffffffffffffffffffffffff16146116b257611676611300565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016116a99190612342565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036117eb57816040517f5b08ba180000000000000000000000000000000000000000000000000000000081526004016117e29190612342565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516118dc91906121d1565b60405180910390a3505050565b60006118f86000836000611413565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361196b57816040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016119629190612538565b60405180910390fd5b5050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115611b19578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02868685856040518563ffffffff1660e01b81526004016119ce9493929190612c56565b6020604051808303816000875af1925050508015611a0a57506040513d601f19601f82011682018060405250810190611a079190612cb7565b60015b611a8e573d8060008114611a3a576040519150601f19603f3d011682016040523d82523d6000602084013e611a3f565b606091505b506000815103611a8657836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611a7d9190612342565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611b1757836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611b0e9190612342565b60405180910390fd5b505b5050505050565b606060405180602001604052806000815250905090565b606060006001611b4684611ecb565b01905060008167ffffffffffffffff811115611b6557611b646125c9565b5b6040519080825280601f01601f191660200182016040528015611b975781602001600182028036833780820191505090505b509050600082602001820190505b600115611bfa578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611bee57611bed6129d7565b5b04945060008503611ba5575b819350505050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8080611c7b5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15611daf576000611c8b8461123b565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611cf657508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015611d095750611d0781846110b7565b155b15611d4b57826040517fa9fbf51f000000000000000000000000000000000000000000000000000000008152600401611d429190612342565b60405180910390fd5b8115611dad57838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b611e1283838361201e565b611ec657600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611e8757806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611e7e9190612538565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401611ebd929190612ce4565b60405180910390fd5b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611f29577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611f1f57611f1e6129d7565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611f66576d04ee2d6d415b85acef81000000008381611f5c57611f5b6129d7565b5b0492506020810190505b662386f26fc100008310611f9557662386f26fc100008381611f8b57611f8a6129d7565b5b0492506010810190505b6305f5e1008310611fbe576305f5e1008381611fb457611fb36129d7565b5b0492506008810190505b6127108310611fe3576127108381611fd957611fd86129d7565b5b0492506004810190505b606483106120065760648381611ffc57611ffb6129d7565b5b0492506002810190505b600a8310612015576001810190505b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156120d657508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612097575061209684846110b7565b5b806120d557508273ffffffffffffffffffffffffffffffffffffffff166120bd836112c3565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b50805460008255906000526020600020908101906120fd9190612100565b50565b5b80821115612119576000816000905550600101612101565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61216681612131565b811461217157600080fd5b50565b6000813590506121838161215d565b92915050565b60006020828403121561219f5761219e612127565b5b60006121ad84828501612174565b91505092915050565b60008115159050919050565b6121cb816121b6565b82525050565b60006020820190506121e660008301846121c2565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561222657808201518184015260208101905061220b565b60008484015250505050565b6000601f19601f8301169050919050565b600061224e826121ec565b61225881856121f7565b9350612268818560208601612208565b61227181612232565b840191505092915050565b600060208201905081810360008301526122968184612243565b905092915050565b6000819050919050565b6122b18161229e565b81146122bc57600080fd5b50565b6000813590506122ce816122a8565b92915050565b6000602082840312156122ea576122e9612127565b5b60006122f8848285016122bf565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061232c82612301565b9050919050565b61233c81612321565b82525050565b60006020820190506123576000830184612333565b92915050565b61236681612321565b811461237157600080fd5b50565b6000813590506123838161235d565b92915050565b600080604083850312156123a05761239f612127565b5b60006123ae85828601612374565b92505060206123bf858286016122bf565b9150509250929050565b6000806000606084860312156123e2576123e1612127565b5b60006123f086828701612374565b935050602061240186828701612374565b9250506040612412868287016122bf565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61245181612321565b82525050565b60006124638383612448565b60208301905092915050565b6000602082019050919050565b60006124878261241c565b6124918185612427565b935061249c83612438565b8060005b838110156124cd5781516124b48882612457565b97506124bf8361246f565b9250506001810190506124a0565b5085935050505092915050565b600060208201905081810360008301526124f4818461247c565b905092915050565b60006020828403121561251257612511612127565b5b600061252084828501612374565b91505092915050565b6125328161229e565b82525050565b600060208201905061254d6000830184612529565b92915050565b61255c816121b6565b811461256757600080fd5b50565b60008135905061257981612553565b92915050565b6000806040838503121561259657612595612127565b5b60006125a485828601612374565b92505060206125b58582860161256a565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61260182612232565b810181811067ffffffffffffffff821117156126205761261f6125c9565b5b80604052505050565b600061263361211d565b905061263f82826125f8565b919050565b600067ffffffffffffffff82111561265f5761265e6125c9565b5b61266882612232565b9050602081019050919050565b82818337600083830152505050565b600061269761269284612644565b612629565b9050828152602081018484840111156126b3576126b26125c4565b5b6126be848285612675565b509392505050565b600082601f8301126126db576126da6125bf565b5b81356126eb848260208601612684565b91505092915050565b6000806000806080858703121561270e5761270d612127565b5b600061271c87828801612374565b945050602061272d87828801612374565b935050604061273e878288016122bf565b925050606085013567ffffffffffffffff81111561275f5761275e61212c565b5b61276b878288016126c6565b91505092959194509250565b6000806040838503121561278e5761278d612127565b5b600061279c85828601612374565b92505060206127ad85828601612374565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806127fe57607f821691505b602082108103612811576128106127b7565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006128518261229e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361288357612882612817565b5b600182019050919050565b60006060820190506128a36000830186612333565b6128b06020830185612529565b6128bd6040830184612333565b949350505050565b7f4e6f207061727469636970616e747320696e2074686520726166666c65000000600082015250565b60006128fb601d836121f7565b9150612906826128c5565b602082019050919050565b6000602082019050818103600083015261292a816128ee565b9050919050565b6000819050919050565b61294c6129478261229e565b612931565b82525050565b60008160601b9050919050565b600061296a82612952565b9050919050565b600061297c8261295f565b9050919050565b61299461298f82612321565b612971565b82525050565b60006129a6828661293b565b6020820191506129b6828561293b565b6020820191506129c68284612983565b601482019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612a118261229e565b9150612a1c8361229e565b925082612a2c57612a2b6129d7565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f2077696e6e657220686173206265656e207069636b656420796574000000600082015250565b6000612a9c601d836121f7565b9150612aa782612a66565b602082019050919050565b60006020820190508181036000830152612acb81612a8f565b9050919050565b7f4e6f7420746865207469636b6574206f776e6572000000000000000000000000600082015250565b6000612b086014836121f7565b9150612b1382612ad2565b602082019050919050565b60006020820190508181036000830152612b3781612afb565b9050919050565b6000612b498261229e565b9150612b548361229e565b9250828203905081811115612b6c57612b6b612817565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600081905092915050565b6000612bb7826121ec565b612bc18185612ba1565b9350612bd1818560208601612208565b80840191505092915050565b6000612be98285612bac565b9150612bf58284612bac565b91508190509392505050565b600081519050919050565b600082825260208201905092915050565b6000612c2882612c01565b612c328185612c0c565b9350612c42818560208601612208565b612c4b81612232565b840191505092915050565b6000608082019050612c6b6000830187612333565b612c786020830186612333565b612c856040830185612529565b8181036060830152612c978184612c1d565b905095945050505050565b600081519050612cb18161215d565b92915050565b600060208284031215612ccd57612ccc612127565b5b6000612cdb84828501612ca2565b91505092915050565b6000604082019050612cf96000830185612333565b612d066020830184612529565b939250505056fea2646970667358221220e7f2bf99fc63d2a243ebeb14460f4bb6da6249aa40cc986f1223d785c6424d5464736f6c634300081d0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BURNTICKET = "burnTicket";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETPARTICIPANTS = "getParticipants";

    public static final String FUNC_GETRAFFLENAME = "getRaffleName";

    public static final String FUNC_GETTICKETOWNER = "getTicketOwner";

    public static final String FUNC_GETWINNER = "getWinner";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINTRAFFLETICKET = "mintRaffleTicket";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_PICKWINNER = "pickWinner";

    public static final String FUNC_RAFFLENAME = "raffleName";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_WINNER = "winner";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected HappyRaffleNFT(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected HappyRaffleNFT(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected HappyRaffleNFT(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected HappyRaffleNFT(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalEventResponse getApprovalEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVAL_EVENT, log);
        ApprovalEventResponse typedResponse = new ApprovalEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalEventFromLog(log));
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApprovalForAllEventResponse getApprovalForAllEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, log);
        ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApprovalForAllEventFromLog(log));
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static TransferEventResponse getTransferEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(TRANSFER_EVENT, log);
        TransferEventResponse typedResponse = new TransferEventResponse();
        typedResponse.log = log;
        typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getTransferEventFromLog(log));
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burnTicket(BigInteger tokenId) {
        final Function function = new Function(
                FUNC_BURNTICKET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getParticipants() {
        final Function function = new Function(FUNC_GETPARTICIPANTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> getRaffleName() {
        final Function function = new Function(FUNC_GETRAFFLENAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getTicketOwner(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETTICKETOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getWinner() {
        final Function function = new Function(FUNC_GETWINNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mintRaffleTicket() {
        final Function function = new Function(
                FUNC_MINTRAFFLETICKET, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final Function function = new Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pickWinner() {
        final Function function = new Function(
                FUNC_PICKWINNER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> raffleName() {
        final Function function = new Function(FUNC_RAFFLENAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to,
            BigInteger tokenId) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to,
            BigInteger tokenId, byte[] data) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator,
            Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final Function function = new Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to,
            BigInteger tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> winner() {
        final Function function = new Function(FUNC_WINNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static HappyRaffleNFT load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new HappyRaffleNFT(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static HappyRaffleNFT load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new HappyRaffleNFT(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static HappyRaffleNFT load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new HappyRaffleNFT(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static HappyRaffleNFT load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new HappyRaffleNFT(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<HappyRaffleNFT> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider, String _raffleName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_raffleName)));
        return deployRemoteCall(HappyRaffleNFT.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<HappyRaffleNFT> deploy(Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider,
            String _raffleName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_raffleName)));
        return deployRemoteCall(HappyRaffleNFT.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<HappyRaffleNFT> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit, String _raffleName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_raffleName)));
        return deployRemoteCall(HappyRaffleNFT.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<HappyRaffleNFT> deploy(Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit,
            String _raffleName) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_raffleName)));
        return deployRemoteCall(HappyRaffleNFT.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
